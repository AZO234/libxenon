#!/bin/bash

# originally written by Uwe Hermann <uwe@hermann-uwe.de>, released as public domain.
# changed for xenon by Felix Domke <tmbinc@elitedvb.net>, still public domain

TARGET=xenon
PREFIX=/usr/local/xenon # Install location of your final toolchain
PARALLEL="-j 2"		# Or: PARALLEL=""

BINUTILS=binutils-2.19.1
GCC=gcc-4.4.0
NEWLIB=newlib-1.17.0
GDB=gdb-6.8

BUILD_BINUTILS=true
BUILD_GCC=true
BUILD_NEWLIB=true
BUILD_GCC_SECOND=true

LOGFILE="`pwd`/build.log"

export PATH="$PATH:$PREFIX/bin"

function libxenon_install
{
	rm -rf free60 &>/dev/null

	#check if git is present to download and install libxenon
	git &>/dev/null
	RETVAL=$?

	if [ $RETVAL -eq 1 ]; then
		echo -e "Downloading libxenon..."
		git clone git://free60.git.sourceforge.net/gitroot/free60/free60 >> $LOGFILE 2>&1
		echo -e "Building libxenon..."
		make -C free60/libxenon/ports/xenon libxenon.a >> $LOGFILE 2>&1
		make -C free60/libxenon/ports/xenon install >> $LOGFILE 2>&1
		cp  free60/devkitxenon/app.lds free60/devkitxenon/rules $PREFIX/
		# startup crt fix
		cp free60/libxenon/startup/xenon/crt1.o /usr/local/xenon/xenon/lib/
		cp free60/libxenon/startup/xenon/crti.o /usr/local/xenon/xenon/lib/
		cp free60/libxenon/startup/xenon/crtn.o /usr/local/xenon/xenon/lib/
		echo
		echo -e "libxenon installled successfully"
		echo
	else
		echo
		echo -e "git is needed to download libxenon, install it and run this script again with \"libxenon\" as argument"
		echo -e "If you are running debian/ubuntu : sudo apt-get install git"
		echo
	fi
}

function toolchain_install
{
	# Make working directory
	echo -e "Creating final xenon toolchain directory: $PREFIX"
	if [ ! -d $PREFIX ]; then
		sudo mkdir $PREFIX
		sudo chown -R `whoami`:`whoami` $PREFIX
	fi;

	# Check if binutils sources are available, download it if needed
	if [ ! -f "$BINUTILS.tar.bz2" ]; then
		echo -e "Downloading $BINUTILS.tar.bz2"
		wget -c http://ftp.gnu.org/gnu/binutils/$BINUTILS.tar.bz2 || exit 0
	fi;

	# Check if gcc sources are available, download it if needed
	if [ ! -f "$GCC.tar.bz2" ]; then
		echo -e "Downloading $GCC.tar.bz2"
		wget -c ftp://ftp.gnu.org/gnu/gcc/$GCC/$GCC.tar.bz2 || exit 0
	fi;

	# Check if newlib sources are available, download it if needed
	if [ ! -f "$NEWLIB.tar.gz" ]; then
		echo -e "Downloading $NEWLIB.tar.gz"
		wget -c ftp://sources.redhat.com/pub/newlib/$NEWLIB.tar.gz || exit 0
	fi;

	rm -rf build

	mkdir build

	if $BUILD_BINUTILS; then
	echo -e "Extracting binutils..."
	tar xfj $BINUTILS.tar.bz2 >> $LOGFILE 2>&1 && cat binutils.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0
	cd build
	echo -e "Configuring binutils..."
	../$BINUTILS/configure --target=$TARGET --prefix=$PREFIX  --enable-multilib   --disable-nls --disable-werror >> $LOGFILE 2>&1 || exit 0
	echo -e "Building binutils, this could take a while..."
	make $PARALLEL >> $LOGFILE 2>&1 || exit 0
	make install >> $LOGFILE 2>&1 || exit 0
	cd ..
	rm -rf build/*;
	echo -e "Done"
	fi; 

	if $BUILD_GCC; then
	echo -e "Extracting gcc..."
	tar xfj $GCC.tar.bz2 >> $LOGFILE 2>&1 && cat gcc.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0
	cd build
	echo -e "Configuring gcc..."
	../$GCC/configure --target=$TARGET --prefix=$PREFIX --with-libiconv-prefix=/opt/local -enable-interwork --enable-multilib \
		--enable-languages="c" --without-headers --disable-shared \
		--with-newlib --disable-libgomp --disable-libmudflap --disable-libssp --disable-nls --disable-shared --disable-threads --without-headers \
		--disable-decimal-float \
		  --with-gmp=/opt/local --with-mpfr=/opt/local --with-cpu=cell >> $LOGFILE 2>&1 || exit 0 
	echo -e "Building gcc, this could take a while..."
	make $PARALLEL all-gcc >> $LOGFILE 2>&1 || exit 0
	make install-gcc >> $LOGFILE 2>&1 || exit 0
	cd ..
	rm -rf build/*
	echo -e "Done"
	fi;

	if $BUILD_NEWLIB; then
	echo -e "Extracting newlib..."
	tar xfz $NEWLIB.tar.gz >> $LOGFILE 2>&1 && cat newlib.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0
	cd build
	echo -e "Configuring newlib..."
	../$NEWLIB/configure --target=$TARGET --prefix=$PREFIX  --enable-multilib   --disable-nls >> $LOGFILE 2>&1 || exit 0
	echo -e "Building newlib, this could take a while..."
	make $PARALLEL >> $LOGFILE 2>&1 || exit 0
	make install >> $LOGFILE 2>&1 || exit 0
	cd ..
	#rm -rf build/*
	echo -e "Done"
	fi 

	if $BUILD_GCC_SECOND; then
	# Yes, you need to build gcc again!
	cd build
	echo -e "Configuring gcc - 2nd pass..."
	../$GCC/configure --target=$TARGET --prefix=$PREFIX --with-libiconv-prefix=/opt/local \
		  --enable-multilib  --with-cpu=cell \
		   --with-gmp=/opt/local --with-mpfr=/opt/local --disable-decimal-float \
		 --enable-languages=c,c++ --disable-libssp --with-newlib --enable-cxx-flags="-G0" --disable-libgomp \
		 --disable-libmudflap --disable-nls --disable-shared --disable-threads  --disable-linux-futex  \
		 	>> $LOGFILE 2>&1 || exit 0
	echo -e "Building gcc - 2nd pass, this could take a while..."
	make $PARALLEL >> $LOGFILE 2>&1 || exit 0
	make install >> $LOGFILE 2>&1 || exit 0
	cd ..
	rm -rf build/*
	echo -e "Done"
	fi

	rm -rf build

}

function cube
{
	rm -rf free60 &>/dev/null
	rm cube.elf32 &>/dev/null

	#check if git is present to download and install libxenon
	git &>/dev/null
	RETVAL=$?

	if [ $RETVAL -eq 1 ]; then

		echo -e "Downloading Cube Sample"
		git clone git://free60.git.sourceforge.net/gitroot/free60/free60 >> $LOGFILE 2>&1
		echo -e "Building Cube Sample..."
		make -C free60/devkitxenon/examples/xenon/graphics/cube >> $LOGFILE 2>&1
		cp free60/devkitxenon/examples/xenon/graphics/cube/cube.elf32 .
		echo
		echo -e "cube.elf32 compiled, run it via xell"
		echo		
		
	else
		echo
		echo -e "git is needed to download libxenon, install it and run this script again with \"libxenon\" as argument"
		echo -e "If you are running debian/ubuntu : sudo apt-get install git"
		echo
	fi
	exit 0	
}

function all_done
{
	echo -e "All done, your xenon toolchain is located here : $PREFIX"
	echo
	echo -e "Please add the following path to your login script (~/.bashrc)"
	echo
	echo -e "export DEVKITXENON=\"/usr/local/xenon\""
	echo -e "export PATH=\"\$PATH:\$DEVKITXENON/bin:\$DEVKITXENON/usr/bin\""
}

## start ##
rm $LOGFILE &>/dev/null

if [ "$1" == "toolchain" ]; then
	toolchain_install
	libxenon_install
	all_done
elif [ "$1" == "libxenon" ]; then
	libxenon_install
elif [ "$1" == "cube" ]; then
	cube
else
	echo
	echo -e "Usage:"
	echo -e "\"$0 toolchain\" (install toolchain + libxenon)"
	echo -e "\"$0 libxenon\" (install or update libxenon)"
	echo -e "\"$0 cube\" (compile the cube sample)"
	echo
	exit 0
fi;


